// views/scripts/main.js

// ==================== ÂÖ®ÂüüËÆäÊï∏ & Ê†∏ÂøÉË®≠ÂÆö ====================
let systemConfig = {};
let currentUser = '';

// È†ÅÈù¢Ë®≠ÂÆöÔºåÂÆöÁæ©ÊØèÂÄãÈ†ÅÈù¢ÁöÑÊ®ôÈ°åÂíåËºâÂÖ•ÂáΩÂºè
const pageConfig = {
    'dashboard': { title: 'ÂÑÄË°®Êùø', subtitle: '‰ª•Ê©üÊúÉÁÇ∫Ê†∏ÂøÉÁöÑÂÆ¢Êà∂Èóú‰øÇÁÆ°ÁêÜÂπ≥Âè∞', loadFn: () => window.dashboardManager.refresh(), loaded: true },
    'contacts': { title: 'ÊΩõÂú®ÂÆ¢Êà∂ÁÆ°ÁêÜ', subtitle: 'ÁÆ°ÁêÜÊâÄÊúâ‰æÜËá™ÂêçÁâáÊàñÂÖ∂‰ªñ‰æÜÊ∫êÁöÑÊΩõÂú®ÂÆ¢Êà∂', loadFn: loadContacts, loaded: false },
    'opportunities': { title: 'Ê©üÊúÉÊ°à‰ª∂ÁÆ°ÁêÜ', subtitle: 'ËøΩËπ§ËàáÁÆ°ÁêÜÊâÄÊúâÈÄ≤Ë°å‰∏≠ÁöÑÊ©üÊúÉÊ°à‰ª∂', loadFn: loadOpportunities, loaded: false },
    'announcements': { title: '‰ΩàÂëäÊ¨ÑÁÆ°ÁêÜ', subtitle: 'Êñ∞Â¢ûËàáÁÆ°ÁêÜÂúòÈöäÁöÑÂÖ¨ÂëäË®äÊÅØ', loadFn: loadAnnouncementsPage, loaded: false }, // „ÄêÊñ∞Â¢û„Äë
    'companies': { title: 'ÂÖ¨Âè∏ÁÆ°ÁêÜ', subtitle: 'Ê™¢Ë¶ñËàáÁÆ°ÁêÜÊâÄÊúâÂÆ¢Êà∂ÂÖ¨Âè∏', loadFn: loadCompaniesListPage, loaded: false },
    'interactions': { title: '‰∫íÂãïÁ∏ΩË¶Ω', subtitle: 'Ê™¢Ë¶ñÊâÄÊúâÊ©üÊúÉÊ°à‰ª∂ÁöÑ‰∫íÂãïÁ¥ÄÈåÑ', loadFn: loadAllInteractionsPage, loaded: false },
    'weekly-business': { title: 'ÈÄ±ÈñìÊ•≠ÂãôÁÆ°ÁêÜ', subtitle: 'Êñ∞Â¢ûËàáÁÆ°ÁêÜÂúòÈöäÁöÑÈÄ±ÈñìÊ•≠ÂãôÈ†ÖÁõÆ', loadFn: loadWeeklyBusinessPage, loaded: false },
    'events': { title: '‰∫ã‰ª∂Á¥ÄÈåÑÂàóË°®', subtitle: 'Êü•ÁúãÊâÄÊúâÊ©üÊúÉÊ°à‰ª∂ÁöÑË©≥Á¥∞‰∫ã‰ª∂Â†±Âëä', loadFn: loadEventLogsPage, loaded: false },
    'follow-up': { title: 'ÂæÖËøΩËπ§ÂàóË°®', subtitle: 'Êü•ÁúãË∂ÖÈÅé7Â§©Êú™ËÅØÁπ´ÁöÑÊ©üÊúÉÊ°à‰ª∂', loadFn: loadFollowUpPage, loaded: false },
    'company-details': { title: 'ÂÖ¨Âè∏Ë©≥Á¥∞Ë≥áÊñô', subtitle: 'Êü•ÁúãÂÖ¨Âè∏ÁöÑÂÆåÊï¥ÈóúËÅØË≥áË®ä', loadFn: loadCompanyDetailsPage, loaded: true },
    'opportunity-details': { title: 'Ê©üÊúÉË©≥Á¥∞Ë≥áÊñô', subtitle: 'Ê™¢Ë¶ñÊ©üÊúÉÁöÑÊâÄÊúâÈóúËÅØË≥áË®ä', loadFn: loadOpportunityDetailPage, loaded: true }
};

// ==================== ÊáâÁî®Á®ãÂºèÂàùÂßãÂåñ ====================
/**
 * CRM Á≥ªÁµ±ÁöÑ‰∏ªÂàùÂßãÂåñÂáΩÂºè
 */
async function initializeCRM() {
    console.log('üöÄ [Main] TFC CRMÁ≥ªÁµ±ÂàùÂßãÂåñ...');
    try {
        await loadSystemConfig();
        
        setupNavigation();
        
        displayCurrentUser();

        // ÂëºÂè´ÂêÑËá™Ê®°ÁµÑÁöÑÂàùÂßãÂåñÂáΩÂºè
        await window.dashboardManager.refresh(); 
        // „Äê‰øÆÊ≠£„ÄëÂú∞ÂúñÂàùÂßãÂåñÁèæÂú®‰πüÁßªÂà∞ dashboardManager ÂÖßÈÉ®ËôïÁêÜÔºåÁ¢∫‰øùÈ†ÜÂ∫èÊ≠£Á¢∫
        // await window.mapManager.initialize(); 
        window.kanbanBoardManager.initialize();
        
        console.log('‚úÖ [Main] TFC CRMÁ≥ªÁµ±ËºâÂÖ•ÂÆåÊàêÔºÅ');
    } catch (error) {
        if (error.message !== 'Unauthorized') {
            console.error('‚ùå [Main] Á≥ªÁµ±ÂàùÂßãÂåñÂ§±Êïó:', error);
            showNotification('Á≥ªÁµ±ÂàùÂßãÂåñÂ§±ÊïóÔºåË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢', 'error');
        }
    }
}

/**
 * ËºâÂÖ•‰∏¶Âø´ÂèñÁ≥ªÁµ±Ë®≠ÂÆö
 */
async function loadSystemConfig() {
    try {
        systemConfig = await authedFetch('/api/config');
        updateAllDropdowns();
    } catch (error) {
        if (error.message !== 'Unauthorized') {
            console.error('‚ùå [Main] ËºâÂÖ•Á≥ªÁµ±Ë®≠ÂÆöÂ§±Êïó:', error);
            systemConfig = {};
        }
    }
}

// ==================== Â∞éËà™Ëàá‰ΩøÁî®ËÄÖÁÆ°ÁêÜ ====================

/**
 * Ë®≠ÂÆöÂÅ¥ÈÇäÊ¨ÑÁöÑÂ∞éËà™ÈªûÊìä‰∫ã‰ª∂
 */
function setupNavigation() {
    const navContainer = document.querySelector('.sidebar-nav');
    const statsContainer = document.querySelector('.stats-grid');

    const handleNavigation = (e) => {
        const target = e.target.closest('[data-page]');
        if (target) {
            e.preventDefault();
            const pageName = target.dataset.page;
            navigateTo(pageName);
        }
    };
    
    if(navContainer) navContainer.addEventListener('click', handleNavigation);
    if(statsContainer) statsContainer.addEventListener('click', handleNavigation);
}

/**
 * Â∞éËà™Âà∞ÊåáÂÆöÁöÑÈ†ÅÈù¢
 * @param {string} pageName - ÁõÆÊ®ôÈ†ÅÈù¢ÁöÑÈçµÂêç
 * @param {object} [params={}] - ÂÇ≥ÈÅûÁµ¶È†ÅÈù¢ËºâÂÖ•ÂáΩÂºèÁöÑÂèÉÊï∏
 */
async function navigateTo(pageName, params = {}) {
    if (!pageConfig[pageName]) {
        console.error(`[Main] Êú™Áü•ÁöÑÈ†ÅÈù¢: ${pageName}`);
        return;
    }

    // „Äê‰øÆÊ≠£„ÄëÂ¢ûÂä†‰∏ÄÂÄãÈÄöÁî®ÁöÑÊ©üÂà∂‰æÜËôïÁêÜÂæÖËæ¶Âãï‰Ωú
    if (params.weekId) { // ÈÄ±ÈñìÊ•≠ÂãôÁöÑÁâπÊÆäËôïÁêÜ
        sessionStorage.setItem('navigateToWeekId', params.weekId);
    } else {
        sessionStorage.removeItem('navigateToWeekId');
    }
    if (params.pendingAction) { // ‰∫ã‰ª∂Á¥ÄÈåÑÁöÑÁâπÊÆäËôïÁêÜ
        sessionStorage.setItem('pendingAction', params.pendingAction);
    } else {
        sessionStorage.removeItem('pendingAction');
    }
    
    const isDetailPage = pageName.includes('-details');

    if (!isDetailPage) {
        document.getElementById('page-title').textContent = pageConfig[pageName].title;
        document.getElementById('page-subtitle').textContent = pageConfig[pageName].subtitle;

        document.querySelectorAll('.nav-list .nav-item').forEach(item => item.classList.remove('active'));
        const activeNavItem = document.querySelector(`.nav-link[data-page="${pageName}"]`);
        if (activeNavItem) activeNavItem.closest('.nav-item').classList.add('active');
    }

    document.querySelectorAll('.page-view').forEach(page => page.style.display = 'none');
    const currentPageView = document.getElementById(`page-${pageName}`);
    currentPageView.style.display = 'block';
    
    if (pageConfig[pageName].loadFn) {
        if (isDetailPage || !pageConfig[pageName].loaded) {
            const paramKey = Object.keys(params)[0];
            await pageConfig[pageName].loadFn(params[paramKey]);
            if (!isDetailPage) pageConfig[pageName].loaded = true;
        }
    }
}


/**
 * È°ØÁ§∫Áï∂ÂâçÁôªÂÖ•ÁöÑ‰ΩøÁî®ËÄÖÂêçÁ®±
 */
function displayCurrentUser() {
    const userDisplay = document.getElementById('user-display-name');
    if (!userDisplay) return;
    
    const userName = localStorage.getItem('crmCurrentUserName');
    
    if (userName) {
        userDisplay.textContent = `üë§ ${userName}`;
        currentUser = userName;
    } else {
        userDisplay.textContent = `üë§ ‰ΩøÁî®ËÄÖ`;
        currentUser = 'Á≥ªÁµ±';
    }
}

function getCurrentUser() {
    return localStorage.getItem('crmCurrentUserName') || 'Á≥ªÁµ±';
}

/**
 * ÁôªÂá∫Á≥ªÁµ±
 */
function logout() {
    localStorage.removeItem('crm-token');
    localStorage.removeItem('crmCurrentUserName');
    showNotification('ÊÇ®Â∑≤ÊàêÂäüÁôªÂá∫', 'success');
    setTimeout(() => { window.location.href = '/'; }, 1000);
}

// ==================== ÂÖ®ÂüüËºîÂä©ÂáΩÂºè ====================

/**
 * ËºâÂÖ•ÊâÄÊúâ HTML Ê®°ÊÖãÊ°ÜÁµÑ‰ª∂
 */
async function loadHTMLComponents() {
    // „ÄêÊñ∞Â¢û„Äë 'announcement-modals'
    const components = ['contact-modals', 'opportunity-modals', 'meeting-modals', 'system-modals', 'event-log-modal', 'event-log-views', 'link-contact-modal', 'link-opportunity-modal', 'announcement-modals'];
    try {
        const htmls = await Promise.all(components.map(c => fetch(`${c}.html`).then(res => res.text())));
        document.getElementById('modal-container').innerHTML = htmls.join('');
    } catch (error) { console.error('‚ùå [Main] ËºâÂÖ•Ê®°ÊÖãÊ°ÜÁµÑ‰ª∂Â§±Êïó:', error); }
}

/**
 * Êõ¥Êñ∞ÊâÄÊúâÈ†ÅÈù¢‰∏≠ÁöÑ‰∏ãÊãâÈÅ∏ÂñÆ
 */
function updateAllDropdowns() {
    const dropdownMappings = { 
        'opportunity-type': 'Ê©üÊúÉÁ®ÆÈ°û', 'upgrade-opportunity-type': 'Ê©üÊúÉÁ®ÆÈ°û', 
        'current-stage': 'Ê©üÊúÉÈöéÊÆµ', 'upgrade-current-stage': 'Ê©üÊúÉÈöéÊÆµ', 
        'opportunity-source': 'Ê©üÊúÉ‰æÜÊ∫ê', 'assignee': 'ÂúòÈöäÊàêÂì°', 
        'upgrade-assignee': 'ÂúòÈöäÊàêÂì°', 'interaction-event-type': '‰∫íÂãïÈ°ûÂûã',
        'map-opportunity-filter': 'Ê©üÊúÉÁ®ÆÈ°û' 
    };
    Object.entries(dropdownMappings).forEach(([elementId, configKey]) => {
        const element = document.getElementById(elementId);
        if (element && systemConfig[configKey]) {
            const firstOptionHTML = element.querySelector('option[value=""]') ? element.querySelector('option[value=""]').outerHTML : '<option value="">Ë´ãÈÅ∏Êìá...</option>';
            element.innerHTML = firstOptionHTML;
            element.innerHTML += systemConfig[configKey].map(item => `<option value="${item.value}">${item.note || item.value}</option>`).join('');
        }
    });
}